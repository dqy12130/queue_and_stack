

/*                     Sqstack's open  source 
*   This file should be use for  the Sqstack's base operation
*   Copyright (C)  2018   DQY 
*   email: 2650822367@qq.com 
*   Please follow  the  law of  China.
*/
#include<iostream>
#define STACK_SIZE 100
#define ERROR 0;
#define OK 1;
typedef int SElemType;
typedef int Status;

typedef struct stack//Sqstack
{
	SElemType *base;
	SElemType *top;
	int stacksize;
}SqStack,*SqStackList;
Status InitStack(SqStack &);
Status DestroyStack(SqStack&);
Status ClearStack(SqStack&);
void StackEmpty(SqStack);
int  Stacklength(SqStack);
SElemType Gettop(SqStack);
void Push(SqStack &, SElemType);
void Pop(SqStack &, SElemType);
void StackTraverse(SqStack);


Status InitStack(SqStack &s)
{
	s.base = new SElemType[STACK_SIZE];
	if (!s.base) 
	{
		//exit(0);
		return ERROR;
	}
	else
	{
		s.top = s.base;
		s.stacksize = STACK_SIZE;
		return OK;
	}
}
Status DestroyStack(SqStack &s)
{
	delete[]s.base;
	if (s.base == NULL)
	{
		return OK;
	}
	else
		return ERROR;
}

Status ClearStack(SqStack&s)
{
	if (s.base == s.top)
	{
		cout << "Stack is empty, needn't clear it" << endl;
		return ERROR;
	}
	else
	{
		while (s.base != s.top)
		{
			s.top--;// top wodn
			s.stacksize++;
		}
		return OK;
	}
}
void StackEmpty(SqStack s)
{
	if (s.base == s.top)
	{
		cout << "SqStack isn't empty" << endl;
	}
	else
		cout << "SqStack is empty" << endl;
}
int Stacklength(SqStack s)
{
	int i = 0;
	if (s.base == s.top)
	   ï¼›
	else
	{
		while (s.base != s.top)
		{
			i++;
			s.top--;
		}	
	}
	return i;
}
SElemType Gettop(SqStack s)
{
	return *s.top;//Return the top pointer's elem
}
void Push(SqStack &s, SElemType x)
{
	if (s.top-s.base==s.stacksize)//The  condition of Sqstack full
	{
	}
	else
	{
		*s.top = x;//Puhsing the elem on Sqstack
		s.top++;
		//Two steps above:  *s.top++=x;
	}
}
void Pop(SqStack &s, SElemType m)
{
	if (s.top == s.base)
	{
		cout << "Sqtack is empty" << endl;
	}
	else
	{
		m = *s.top;
		s.top--;
		//Two steps above:  *--s.top;
	}
}
void StackTraverse(SqStack s)
{
	if (s.base == s.top)
	{
		cout << "The Sqstack isn't empty" << endl;
	}
	else
	{
		while (s.top != s.base)
		{
			cout << *s.top << "  ";
			s.top--;//The top pointer dowm 
		}
	}
}

void main()
{
	SqStack mystack;
	cout<<InitStack(mystack);
	Push(mystack, 100);
	StackEmpty(mystack);
	Stacklength(mystack);
	system("pause");
}
